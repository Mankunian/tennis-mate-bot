const TelegramBot = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');
const jwt = require("jsonwebtoken");
const axios = require('axios');


const token = '7323849851:AAFV3onhUFo8esiB-e8r4YVgwnYKldw-D5U';
const bot = new TelegramBot(token, {polling: true});
const MY_CHAT_ID = 289282054;
const dataFilePath = path.resolve(__dirname, './database/user_data.json');

const tennisTerms = require('./helper/tennisTerms');
const API_URI = `http://localhost:3000`;


function loadUserData() {
    try {
        if (fs.existsSync(dataFilePath)) {
            const data = fs.readFileSync(dataFilePath, 'utf-8');
            return JSON.parse(data);
        } else {
            return [];
        }
    } catch (error) {
        console.error("Error loading user data:", error);
        return [];
    }
}


function saveUserData(data) {
    try {
        fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2), 'utf-8');
    } catch (error) {
        console.error("Error saving user data:", error);
    }
}


// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞
bot.setMyDescription("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —Ç–µ–Ω–Ω–∏—Å–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏–ª–∏ —Ç—Ä–µ–Ω–µ—Ä–∞, –∫—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–Ω–Ω–∏—Å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.")
    .then(() => console.log('–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è:', err));

// Set the list of commands
bot.setMyCommands([
    {command: '/start', description: 'Start interacting with the bot'},
    {command: '/findpartner', description: 'Find a tennis partner'},
    {command: '/findcoach', description: 'Find a tennis coach'},
    {command: '/creategame', description: 'Create a tennis game'},
    {command: '/info', description: 'Info about me'},
    {command: '/get_avatar', description: 'Get profile avatar'},
])

bot.onText(/\/learn_terms/, async (msg) => {
    const chatId = msg.chat.id;

    const termsMessage = tennisTerms
        .slice(0, 3)
        .map(term => `*${term.term}*: ${term.definition}`)
        .join("\n\n");

    const message = `
üìñ *–¢–µ–Ω–Ω–∏—Å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã*
${termsMessage}

–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –±–æ–ª—å—à–µ —Ç–µ—Ä–º–∏–Ω–æ–≤, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.
    `;

    await bot.sendMessage(chatId, message, {
        parse_mode: "Markdown",
        reply_markup: {
            inline_keyboard: [
                [
                    {
                        text: "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–ª—å—à–µ",
                        web_app: {url: "https://tennismate.netlify.app/terms"}
                    },
                ],
            ],
        },
    });
});

bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const userName = msg.from.first_name || "–¥—Ä—É–≥";

    const welcomeMessage = `
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${userName}! üéæ
–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:  
- –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –¥–ª—è –∏–≥—Ä—ã –≤ —Ç–µ–Ω–Ω–∏—Å;  
- –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫;  
- –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –∏–≥—Ä—ã;  
- –ö—É–ø–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å —Ç–µ–Ω–Ω–∏—Å–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ.  
- –ò–∑—É—á–∏—Ç—å —Ç–µ–Ω–Ω–∏—Å–Ω—É—é —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—é.


–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:  
- /find_partner ‚Äî –ù–∞–π—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–∞  
- /find_coach ‚Äî –ù–∞–π—Ç–∏ —Ç—Ä–µ–Ω–µ—Ä–∞  
- /find_court ‚Äî –ù–∞–π—Ç–∏ –∫–æ—Ä—Ç  
- /buy_sell ‚Äî –ö—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ  
- /learn_terms ‚Äî –ò–∑—É—á–∏—Ç—å —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
- /help ‚Äî –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º  
- /my_profile - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ

–ù–∞—á–Ω–µ–º? üòä
    `;

    await bot.sendMessage(chatId, welcomeMessage);
});

bot.onText(/\/my_profile/, async (msg) => {
    const chatId = msg.chat.id;
    const userName = msg.chat.username || msg.chat.first_name || "Unknown User";

    try {
        const userData = await getUser(chatId);
        if (userData) {
            // await bot.sendMessage(chatId, );
            const message = `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: \n
            ChatId: ${userData.chatId}  \n
            Phone: ${userData.phone} \n
            First name: ${userData.first_name}
            Url: https://tennismate.netlify.app/profile/${chatId}
            `;

            await bot.sendMessage(chatId, message, {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ü—Ä–æ—Å–º–æ—Ç—Ä",
                                web_app: {url: `https://tennismate.netlify.app/profile/${chatId}`}
                            },
                        ],
                    ],
                },
            });
        } else {
            await requestPhoneNumber(bot, chatId);
        }
    } catch (e) {
        // Error handling
        console.error('Error:', e.message);
        await bot.sendMessage(chatId, "An error occurred while fetching your profile.");
    }


    async function getUser(chatId) {
        try {
            if (!chatId) {
                throw new Error('Invalid chatId');
            }

            // HTTP POST-–∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é axios
            const response = await axios.post(`${API_URI}/get-user`, {
                chatId: chatId // –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
            });

            // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ—Ç–≤–µ—Ç–∞
            const data = response.data;
            console.log('Profile data:', data);
            return data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ

        } catch (e) {
            console.error('Error in getUser:', e.message);
            console.error(e.status)
            if (e.status === 404) return null;
        }
    }


    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async function requestPhoneNumber(bot, chatId) {
        await bot.sendMessage(
            chatId,
            `üîç *–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º–µ.*\n\n` +
            `üì± –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º —Å–µ—Ä–≤–∏—Å–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`
            , {
                parse_mode: 'Markdown',
                reply_markup: {
                    keyboard: [
                        [{text: 'üìû –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞', request_contact: true}]
                    ],
                    resize_keyboard: true,
                    one_time_keyboard: true
                }
            }
        );
    }


});

// Telegram bot handler
bot.on("contact", async (contactMsg) => {
    const chatId = contactMsg.chat.id;
    const userPhone = contactMsg.contact.phone_number;
    const firstName = contactMsg.contact.first_name;

    const newUser = {
        chatId,
        phone: userPhone,
        first_name: firstName,
        ntrp_level: null,
        gender: null,
        birthday: null,
        region: null
    };

    createUser(newUser)
        .then(async (response) => {
            const {first_name, phone, ntrp_level, gender, region, birthday} = response.user;
            const message = `–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n
            –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${first_name}
            –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}
            Ntrp —É—Ä–æ–≤–µ–Ω—å: ${ntrp_level ? ntrp_level : `–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`}
            –ü–æ–ª: ${gender ? gender : `–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`}
            –†–µ–≥–∏–æ–Ω: ${region ? region : `–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`}
            –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${birthday ? birthday : `–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`}`;


            await bot.sendMessage(chatId, message, {
                parse_mode: "Markdown",
                reply_markup: {
                    inline_keyboard: [
                        [
                            {
                                text: "–ü—Ä–æ—Å–º–æ—Ç—Ä",
                                web_app: {url: `https://tennismate.netlify.app/profile/${chatId}`}
                            },
                        ],
                    ],
                },
            });

        })
        .catch(e => {
            console.log(e)
        })


    async function createUser(newUser) {
        try {
            const response = await axios.post(`${API_URI}/create-user`, newUser);
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', response.data);
            return response.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.response?.data?.error || error.message);
            throw error;
        }
    }


});

